generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Inventory {
  id        Int     @id @default(autoincrement())
  
  productId Int
  
  cant      Int     @default(0)
  total     Int     @default(0)
  selled Int @default(0)

  createdAt DateTime @default(now())

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sell InventoryOnSell[]

  @@map("inventories")
}

model Product {
  id        Int         @id @default(autoincrement())
  by_user   String
  org       String
  
  name      String
  image     String?
  price     Int
  aviable   Int @default(0)
  status    String 
  description String? @default("")

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  inventories Inventory[]
  selleds Sell[]
  prices PriceBreakdown[]
  organization Organization @relation(fields: [org], references: [org], onDelete: Cascade) 

  @@map("products")
}

model PriceBreakdown {
  id Int @id @default(autoincrement())

  cant Int
  value Int

  productId Int 

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("prices")
}

model Sell {

  id Int @id @default(autoincrement())

  productId Int
  areaId Int

  cant Int @default(0)
  price Int @default(0)

  selledAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  Area SellArea @relation(fields: [areaId], references: [id], onDelete: Cascade)
  inventories InventoryOnSell[]

  @@map("sells")
}

model InventoryOnSell {

  id Int @id @default(autoincrement())

  sellId Int 
  sell Sell @relation(fields: [sellId], references: [id], onDelete: Cascade)

  inventoryId Int?
  inventory Inventory? @relation(fields: [inventoryId], references: [id], onDelete: SetNull)

  cant Int
  price Int
  selledAt DateTime @default(now())


  @@map("sells-inventories")
}

model SellArea {

  id Int @id @default(autoincrement())

  org String

  createdAt DateTime @default(now())
  endedAt DateTime? 

  Sells Sell[]

  @@map("sell-areas")
}


model Organization {

  org String @id
  by_user String?

  plan String @default("free")

  name String
  image String
  slug String

  description String?
  location String?
  email String?
  phone String?
  
  domicilio Boolean @default(true)
  domicilio_details String?

  visible Boolean @default(false)

  products Product[]
  transactions OrganizationTransactions[]

  @@map("organizations")
}

model OrganizationKeys {

  id Int @id @default(autoincrement())

  code String @default(uuid())

  plan String @default("free")
  price Int @default(0)

  org String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organizations_keys")
}

model OrganizationTransactions {
  
  id Int @id @default(autoincrement())

  org String 
  organization Organization @relation(fields: [org], references: [org], onDelete: Cascade)
  
  plan String @default("free")
  method String
  price Int 

  createdAt DateTime @default(now())

  @@map("organizations_transactions")
}


model Solicitudes {

  id Int @id @default(autoincrement())
  user String?

  name String
  org_type String
  email String

  des String?
  phone String?

  type String @default("solicitud")
  key String @default(uuid())
  aviable Int @default(1)

  updatedAt DateTime @updatedAt
  
  @@map("solicitudes")
}